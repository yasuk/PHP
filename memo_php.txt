■------------------------------------------------------------------------------
■ PHPのプロンプトモード
■------------------------------------------------------------------------------

php -a



■------------------------------------------------------------------------------
■ PHPのシンタックスエラーチェック
■------------------------------------------------------------------------------

php -l phpファイル



■------------------------------------------------------------------------------
■ 日付の表示
■------------------------------------------------------------------------------

・年月日 時分秒
  date('Y/m/d H:i:s');

・月初日
  date('Y/m/01');

・月末日
  date('Y/m/t');

・曜日（0:日～6:土）
  date('w')



■------------------------------------------------------------------------------
■ sprintfのフォーマット中に%がある場合のエスケープ方法
■------------------------------------------------------------------------------

%%と書く。



■------------------------------------------------------------------------------
■ sprintfの可変文字の順番指定
■------------------------------------------------------------------------------

$format = 'The %2$s contains %1$d monkeys';
echo sprintf($format, $num, $location);

https://www.php.net/manual/ja/function.sprintf.php



■------------------------------------------------------------------------------
■ foreachのnullセーフ
■------------------------------------------------------------------------------

foreachに空の配列や、配列でない変数を渡した場合に「Invalid argument supplied for foreach()」が発生するため、以下のようにキャストする。

foreach((array)$array as $elem) {
　　// hogehoge.
}
⇒$arrayがnullの場合は要素が0個の配列にキャストされ、$arrayが配列でない型の場合は要素が1個の配列（元の$arrayを唯一の要素に持つ配列）にキャストされる。

（参考URL）
　https://quartet-communications.com/info/topics/7094



■------------------------------------------------------------------------------
■ number_format()の小数点がある場合の挙動
■------------------------------------------------------------------------------

第2引数を指定しない場合、小数点以下は四捨五入される。

echo number_format(123.4), PHP_EOL;
⇒123

echo number_format(123.5), PHP_EOL;
⇒124



■------------------------------------------------------------------------------
■ クラスの外からインスタンス変数を定義＆設定する方法（Javaと違う）
■------------------------------------------------------------------------------

class TestClass {
    function testPrint() {
        echo $this->str, PHP_EOL;
    }
}

$t = new TestClass();
$t->str = 'bbb';			// ←TestClassに$strは無いが、クラスの外から代入すると定義もされる。
$t->testPrint();
⇒bbb



■------------------------------------------------------------------------------
■ エラー処理
■------------------------------------------------------------------------------

関数の前に@を付けて呼び出すと、エラーが抑制される。

しかし、set_error_handlerでエラーハンドラを設定している場合は、設定したエラーハンドラの処理が行われる。
その場合は、error_reporting()の戻り値が0になるため、処理を分けることができる。
http://php.net/manual/ja/language.operators.errorcontrol.php

E_ERROR, E_PARSE, E_CORE_ERROR, E_CORE_WARNING, E_COMPILE_ERROR, E_COMPILE_WARNING のエラーは、set_error_handlerでは処理できないため注意。
http://php.net/manual/ja/function.set-error-handler.php


●コーディング例
<?php

function myErrorHandler($errno, $errstr, $errfile, $errline){
    // @を付けた関数でエラーが発生した場合は何もしない。
    if( !error_reporting() ) return;

    $body = $errno.' : '.$errstr.' File : '.$errfile.' Line '.$errline.' '."\n";
    print($body);
}

set_error_handler('myErrorHandler');



■------------------------------------------------------------------------------
■ foreachでkey, valを指定しない場合と指定した場合の変数に格納される値
■------------------------------------------------------------------------------

●テストコード
test@srv01:~/php$ cat test_arr.php
<?php

$arr['@key1']['@@key1']='val1';
$arr['@key1']['@@key2']='val2';
$arr['@key2']['@@key1']='val3';
$arr['@key2']['@@key2']='val4';

foreach( $arr as $data ) {
        print_r( $data );
}

echo '-------------------------------', PHP_EOL;

foreach( $arr as $key => $val ) {
        print_r( $key );
        echo PHP_EOL;
        print_r( $val );
}
test@srv01:~/php$


●結果
test@srv01:~/php$ php test_arr.php
Array
(
    [@@key1] => val1
    [@@key2] => val2
)
Array
(
    [@@key1] => val3
    [@@key2] => val4
)
-------------------------------
@key1
Array
(
    [@@key1] => val1
    [@@key2] => val2
)
@key2
Array
(
    [@@key1] => val3
    [@@key2] => val4
)
test@srv01:~/php$
⇒key, valを指定しない場合（1つ目）は、valのみが参照される。



■------------------------------------------------------------------------------
■ コールバック関数にインスタンスのメソッドを指定する方法
■------------------------------------------------------------------------------

http://php.net/manual/ja/language.types.callable.php

・関数（クラスのメソッドでない）を指定する場合
  usort( $arr, 'cmp' );

・インスタンスのメソッドを指定する場合
  // 自クラスの場合
  usort( $arr, array( $this, 'cmp' ) );

  // 外部クラスの場合
  $obj = new SortTest();
  usort( $arr, array( $obj, 'cmp' ) );



■------------------------------------------------------------------------------
■ 実行時間の取得
■------------------------------------------------------------------------------

https://qiita.com/ao_love/items/a2d8b8566d0426195002

$start_time = microtime(true);

// 計測したい処理

$exec_time = microtime(true) - $start_time;
echo "{$exec_time} 秒";



■------------------------------------------------------------------------------
■ 配列からnull値の除去
■------------------------------------------------------------------------------

$arr = array_filter($arr);

php > $arr[]='aaa';
php > $arr[]='';
php > $arr[]='bbb';
php > print_r($arr);
Array
(
    [0] => aaa
    [1] =>
    [2] => bbb
)
php >
php >
php > print_r( array_filter( $arr) );
Array
(
    [0] => aaa
    [2] => bbb
)
php >



■------------------------------------------------------------------------------
■ 配列の中身が空かどうかのチェック
■------------------------------------------------------------------------------

$array = array_filter( $array );
if( empty($array ) ) {
	// 空の場合の処理
}



■------------------------------------------------------------------------------
■ 正規表現
■------------------------------------------------------------------------------

・1-01_xx_1, 1-02_xx_1にマッチする正規表現（xxは任意の文字数）

preg_match( '/(1-01|1-02)_.*?_1$/i', $str ) 

※.*?は任意の1文字の繰り返しで、最短マッチ。


・htmlタグの中身を取得する正規表現。以下はaタグの中身を取得。
if( preg_match( '/<a(?:.*?)>([^<>]+)<\/a>/', $str, $matches ) ) {
	$val = $matches[1];
}

※()の中の?:はキャプチャしないという意味。



・フラグ
# 大小文字を無視して比較
  \i

# 改行を無視
  /s

# Unicodeで比較
  /u



■------------------------------------------------------------------------------
■ 文字列の抜き出し
■------------------------------------------------------------------------------

・最後の1文字の削除
substr( $str, 0, -1 );

・最後の1文字の取得
substr('abc', -1);



■------------------------------------------------------------------------------
■ 数値と文字の比較の注意点
■------------------------------------------------------------------------------

文字が数値に変換されて比較される。
以下の'a'が0に変換されてtrueになるため注意。

php > var_dump( 'a' == 0 );
bool(true)
php >

https://www.php.net/manual/ja/language.operators.comparison.php に以下の記述あり。
> var_dump(0 == "a"); // 0 == 0 -> true



■------------------------------------------------------------------------------
■ コマンドライン実行時の標準入力
■------------------------------------------------------------------------------

echo 'execute? (y/n): ';
$stdin = trim( fgets( STDIN ) );
if( $stdin != 'y' ) {
	exit();
}



■------------------------------------------------------------------------------
■ テキストファイル読み込み（1行ずつ読み込む）
■------------------------------------------------------------------------------

$fp = fopen( $file_path, 'r' );
while( $line = fgets( $fp ) ) {
	// 末尾の改行の除去（fgetsの結果は改行が含まれる）
	$line = rtrim( $line );

	// do something

}
fclose( $fp );



■------------------------------------------------------------------------------
■ テキストファイル読み込み（改行や空行を無視してテキストファイルを読み込む）
■------------------------------------------------------------------------------

$data = file( 'test.txt', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES );



■------------------------------------------------------------------------------
■ includeやrequire_onceで読み込むファイルを途中でやめたい場合
■------------------------------------------------------------------------------

読み込みファイル中に return; を記述する。

https://www.php.net/manual/ja/function.include.php
抜粋：インクルードしたファイルの中で return を実行すれば、 そのファイルの処理をそこで止めて呼び出し元に処理を戻せます。



■------------------------------------------------------------------------------
■ functionのオブジェクト参照渡し
■------------------------------------------------------------------------------

PHPではオブジェクトをメソッドに渡すときは参照渡しになる。（配列の場合は値渡しになる。&$arrのように&を付けると参照渡しになる）

function test( $model ) {
	$model.setName('aaa');  // ←元のオブジェクト$modelが変更される。（$modelは参照なのでコピーされた新しいオブジェクトではない）
}



■------------------------------------------------------------------------------
■ クラスが書かれているファイルを表示
■------------------------------------------------------------------------------

require_once( '/home/php/class.CObject.php' );
$a = new \ReflectionClass('CObject');
var_dump( $a->getFileName() );
// Output: /home/php/class.CObject.php

https://www.php.net/manual/ja/reflectionclass.getfilename.php



■------------------------------------------------------------------------------
■ 配列のソート（自然順）
■------------------------------------------------------------------------------

https://www.php.net/manual/ja/array.sorting.php

値を自然順にソートするnatsort()があるが、Keyを自然順でソートしたい場合は、以下のように指定することで可能。
ksort( $data, SORT_NATURAL );



■------------------------------------------------------------------------------
■ 連想配列を特定のキーでソート
■------------------------------------------------------------------------------

$sort_key = array();
foreach( (array) $data as $index => $rec ) {
	$sort_key[] = $rec['no'];
}
array_multisort( $sort_key, SORT_ASC, $data );

print_r( $data );



■------------------------------------------------------------------------------
■ Noticeメッセージの抑止
■------------------------------------------------------------------------------

https://php1st.com/634

例）Notice: Undefined variable: aaa ......

・php.ini
  error_reporting = E_ALL & ~E_NOTICE

・PHPスクリプト
  error_reporting(E_ALL & ~E_NOTICE);

・Apacheの.htaccess
  php_value error_reporting 30711



■------------------------------------------------------------------------------
■ メソッドの動的呼び出し
■------------------------------------------------------------------------------

// 以下の$funcのように変数に入れて呼び出さないとエラーになる。

class Test {
	function abc( $val ) {
		echo $val, PHP_EOL;
	}

	function test() {
		$func = 'abc';
		$this->$func( 'aaa' );
	}
}

$test = new Test();
$test->test();

// func_aaaを呼び出したいときに以下のように書くとエラーになる。
// $id = 'aaa';
// $this->func_{$id};



■------------------------------------------------------------------------------
■ 浮動小数点数の深い桁を表示する方法
■------------------------------------------------------------------------------

var_dump( sprintf( '%.40f', 0.1 ) );



■------------------------------------------------------------------------------
■ 浮動小数点数の誤差をなくす方法
■------------------------------------------------------------------------------

BC Math関数でstring型で計算する。
https://www.php.net/manual/ja/ref.bc.php

https://www.php.net/manual/ja/language.types.float.php
https://floating-point-gui.de/languages/php/

http://ollie-creation.co.jp/blog/?p=1



■------------------------------------------------------------------------------
■ 正規表現で特殊文字を除外する方法（16進で指定）
■------------------------------------------------------------------------------

\u2028は終端文字でJavaScriptがエラーになるため除外。（e280a8は16進数の値）
$data = preg_replace( '/\xe2\x80\xa8/', '', $data );

\xと書くと16進数が指定できる。



■------------------------------------------------------------------------------
■ composerの使い方
■------------------------------------------------------------------------------

例として、ライブラリgeoip2をcomposerでインストールする場合。

cd /home/test/

php composer.phar require geoip2/geoip2:~2.0
⇒composer.jsonに追記され、パッケージがインストールされる。

※パッケージ名（geoip2/geoip2）の部分は以下で検索すると見つかる。
　https://packagist.org/
※~2.0というのはバージョン。指定しなくてもいい。

ll vendor
⇒インストールしたものが格納されている。

PHPでgeoip2を使うときは以下のように書く。
require_once '/home/test/vendor/autoload.php';
$geoip2 = new GeoIp2\Database\Reader( __DATA_GEOIP2 . 'GeoLite2-Country.mmdb' );



■------------------------------------------------------------------------------
■ URLのクエリ部分をエンコード
■------------------------------------------------------------------------------

# XSSを防ぐためにクエリの値（'?param=aaa'のaaaの部分）をエンコードする。

# 文字列を渡してエンコードしたい場合
urlencode( $val );

https://www.php.net/manual/ja/function.urlencode.php


# URLを渡してクエリ部分をエンコードしたい場合
function encode_url_query( $url ) {
	$url_infos = parse_url( $url );

	if( isset( $url_infos['query'] ) ) {
		parse_str( $url_infos['query'], $params );
		$url_parts = explode( '?', $url );
		// PHP_QUERY_RFC3986は半角スペースを%20に変換するため指定。（デフォルトだと旧RFCに従って+に変換される）
		$url_encoded = $url_parts[0].'?'.http_build_query( $params, null, '&', PHP_QUERY_RFC3986 );
	} else {
		$url_encoded = $url;
	}
	return $url_encoded;
}


■------------------------------------------------------------------------------
■ urldecodeの注意点
■------------------------------------------------------------------------------

$_GET や $_REQUEST はデコード済みのため、urldecodeを行ってはいけない。

https://www.php.net/manual/ja/function.urldecode.php
> スーパーグローバル $_GET および $_REQUEST の内容はすでにデコード済みのものです。 $_GET や $_REQUEST の要素に対して urldecode() を使用すると、予期せぬ危険な結果となります。



■------------------------------------------------------------------------------
■ htmlのサニタイジング
■------------------------------------------------------------------------------

# エンコード
htmlspecialchars( $str )

https://www.php.net/manual/ja/function.htmlspecialchars.php

※第2引数を指定することで、シングルクォーテーションやダブルクォーテーションも変換できる。


# デコード
htmlspecialchars_decode( $str )

https://www.php.net/manual/ja/function.htmlspecialchars-decode.php



■------------------------------------------------------------------------------
■ 日本語の判定
■------------------------------------------------------------------------------

function is_japanese( $str ) {
	return preg_match( "/[一-龠]+|[ぁ-ん]+|[ァ-ヴー]+|[ａ-ｚＡ-Ｚ０-９]+/u", $str );
}



■------------------------------------------------------------------------------
■ 簡易ログ出力
■------------------------------------------------------------------------------

function put_log( $msg ) {
	if( !$msg ) { return; }

	$msg = date('Y/m/d H:i:s ') . $msg . PHP_EOL;
	file_put_contents( '/tmp/test.log', $msg, FILE_APPEND );
}



■------------------------------------------------------------------------------
■ ディレクトリ配下のファイル名取得
■------------------------------------------------------------------------------

array_diff( scandir( $dir ), array( '.', '..' ) );



■------------------------------------------------------------------------------
■ ディレクトリのzip圧縮
■------------------------------------------------------------------------------

private function zip_dir( $dir ) {
	$zip = new ZipArchive;
	$zip->open( $dir.'.zip', ZipArchive::CREATE | ZipArchive::OVERWRITE );
	$zip_files = array_diff( scandir( $dir ), array( '.', '..' ) );
	foreach( (array) $zip_files as $index => $zip_file ) {
		// 第2引数を指定しないとディレクトリ構成がそのままzipファイルの中に作成される。
		$zip->addFile( $dir.'/'.$zip_file, $zip_file );
	}
	$zip->close();
}



■------------------------------------------------------------------------------
■ ディレクトリの作成
■------------------------------------------------------------------------------

# 第3引数を指定することでサブディレクトリが再帰的に作成される。
mkdir('aaa/bbb/ccc', 0777, true);



■------------------------------------------------------------------------------
■ 全角は2文字、半角は1文字とカウントする関数
■------------------------------------------------------------------------------

mb_strwidth( $str )

https://www.php.net/manual/ja/function.mb-strwidth.php



■------------------------------------------------------------------------------
■ 指定した幅で文字列を丸める関数
■------------------------------------------------------------------------------

php > echo mb_strimwidth("Hello World", 0, 10, "...");
Hello W...
php >

※"..."も含めて10文字になる。

https://www.php.net/manual/ja/function.mb-strimwidth.php



■------------------------------------------------------------------------------
■ 3DES-CBCの暗号・復号
■------------------------------------------------------------------------------

function encrypt_3des( $str ) {
	$encode_str = mb_convert_encoding( $str, 'Shift_JIS', 'UTF-8' );
	// SJISのためstrlenで長さを取得。
	$pad_len = ceil( strlen( $encode_str ) / 8 ) * 8;
	$encode_str = str_pad( $encode_str, $pad_len );

	$iv = $this->iv_3des;
	$key = $this->key_3des;
    $method = 'des-ede3-cbc';

	$crypt_str = openssl_encrypt( $encode_str, $method, $key, OPENSSL_NO_PADDING, $iv );

	return base64_encode( $crypt_str );
}



function decrypt_3des( $base64_crypt_str ) {
	$iv = $this->iv_3des;
	$key = $this->key_3des;
    $method = 'des-ede3-cbc';
	$crypted_str = base64_decode( $base64_crypt_str );

	$decrypt_str = openssl_decrypt( $crypted_str, $method, $key, OPENSSL_NO_PADDING, $iv );

	return mb_convert_encoding( $decrypt_str, 'UTF-8', 'Shift_JIS' );
}



■------------------------------------------------------------------------------
■ 連想配列からxml作成
■------------------------------------------------------------------------------

private function create_xml( $func_id, $datas ) {
	// rootの作成
	$dom = new DOMDocument( '1.0', 'Shift_JIS' );
	$dom->formatOutput = true;

	$root_elm = $dom->createElement( 'test' );
	$root_attr = $dom->createAttribute( 'id' );
	$root_attr->value = $func_id;
	$root_elm->appendChild( $root_attr );
	$dom->appendChild( $root_elm );

	// childの作成
	$this->append_child_elements_to_xml( $dom, $root_elm, $datas );

	$xml = $dom->saveXML();

	return $xml;
}

// 以下のように子要素が複数ある場合、
// <rows>
// 	<row><no>1</no></row>
// 	<row><no>2</no></row>
// </rows>
// 
// 以下のようにセットする。
// $datas['rows'][0]['row']['no'] = 1;
// $datas['rows'][1]['row']['no'] = 2;
private function append_child_elements_to_xml( $dom, $base_elm, $datas ) {
	foreach( $datas as $key => $val ) {
		if( is_array( $val ) ) {
			if( is_numeric( $key ) ) {
				foreach( $val as $_key => $_val ) {
					$elm = $dom->createElement( $_key );
					$base_elm->appendChild( $elm );
					$this->append_child_elements_to_xml( $dom, $elm, $_val );
				}
			} else {
				$elm = $dom->createElement( $key );
				$base_elm->appendChild( $elm );
				$this->append_child_elements_to_xml( $dom, $elm, $val );
			}
		} else {
			$elm = $dom->createElement( $key, $val );
			$base_elm->appendChild( $elm );
		}
	}
}



■------------------------------------------------------------------------------
■ functionの中からincludeすると、includeファイルのグローバル変数がincludeファイルのfunctionの中から参照できない。
■ 下記コードは無名関数にしているが、普通の関数でも同じ。
■ 下記コードにはないが、functionの外でincludeすると参照できる。
■------------------------------------------------------------------------------

●test_include.php
<?php

class Test {
	public function testFunc() {
		include 'test_include_sub.php';
	}
}
$test = new Test();
$test->testFunc();


function global_func() {
	include 'test_include_sub.php';
}
global_func();



●test_include_sub.php
<?php

$val = 'val';

$func = function() {
	global $val;

	echo "func was called.", PHP_EOL;
	echo $val, PHP_EOL;
};

$func();



●実行結果
test@srv01:~/php$ php test_include.php
func was called.

func was called.

test@srv01:~/php$



■------------------------------------------------------------------------------
■ defineのタイミングによる挙動
■------------------------------------------------------------------------------

・インスタンス変数に定数を代入している場合、defineした後にインスタンスを作ると定数が置き換わる。

test@srv01:~/php$ cat t.php
<?php

class Test {
    public $str = _STR;
}

define( '_STR', 'aaaaaaaaaa');
$test = new Test();
echo $test->str, PHP_EOL;

$test2= new Test();
echo $test2->str, PHP_EOL;

test@srv01:~/php$
test@srv01:~/php$ php t.php
aaaaaaaaaa
aaaaaaaaaa
test@srv01:~/php$



・しかし、1回目のインスタンス作成後にdefineすると、2回目のインスタンス作成時も置き換わらない。
　おそらく、1回目のインスタンス作成時に内部的に情報を持つと思われる。

test@srv01:~/php$ cat t.php
<?php

class Test {
    public $str = _STR;
}

$test = new Test();
echo $test->str, PHP_EOL;

define( '_STR', 'aaaaaaaaaa');
$test2= new Test();
echo $test2->str, PHP_EOL;

test@srv01:~/php$
test@srv01:~/php$ php t.php
PHP Notice:  Use of undefined constant _STR - assumed '_STR' in /home/test/php/t.php on line 7
_STR
_STR
test@srv01:~/php$



・メソッドの引数やメソッドの中で使われている定数は都度置き換わる。

test@srv01:~/php$ cat t.php
<?php

class Test {
    public $str = _STR;

    public function print_msg( $msg=_STR ) {
        echo $msg, PHP_EOL;
    }
}

$test = new Test();
// echo $test->str, PHP_EOL;
$test->print_msg();

define( '_STR', 'aaaaaaaaaa');
$test2= new Test();
// echo $test2->str, PHP_EOL;
$test2->print_msg();



test@srv01:~/php$
test@srv01:~/php$ php t.php
PHP Notice:  Use of undefined constant _STR - assumed '_STR' in /home/test/php/t.php on line 11
PHP Notice:  Use of undefined constant _STR - assumed '_STR' in /home/test/php/t.php on line 6
_STR
aaaaaaaaaa
test@srv01:~/php$



